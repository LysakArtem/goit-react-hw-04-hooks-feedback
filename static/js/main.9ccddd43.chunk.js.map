{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification.js","components/Section.js","App.js","index.js"],"names":["FeedbackOptions","onLeaveFeedback","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","Section","title","children","App","useState","setGood","setNeutral","setBad","totalFeedback","className","options","s","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LACe,SAASA,EAAT,GAA+C,IAApBC,EAAmB,EAAnBA,gBACxC,OACE,qCACE,wBACEC,KAAK,SACLC,QAAS,WACPF,EAAgB,SAHpB,kBAQA,wBACEC,KAAK,SACLC,QAAS,WACPF,EAAgB,YAHpB,qBAQA,wBACEC,KAAK,SACLC,QAAS,WACPF,EAAgB,QAHpB,oBCnBS,SAASG,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,WCbS,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,4BAAIA,ICDE,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,gCACGD,GAAS,6BAAKA,IACdC,KCoDQC,MAnDf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNX,EADM,KACAY,EADA,OAEiBD,mBAAS,GAF1B,mBAENV,EAFM,KAEGY,EAFH,OAGSF,mBAAS,GAHlB,mBAGNT,EAHM,KAGDY,EAHC,KAKPC,EAAgBf,EAAOC,EAAUC,EAsBvC,OACE,sBAAKc,UAAU,MAAf,UACE,cAACT,EAAD,CAASC,MAAM,wBAAf,SACE,cAACb,EAAD,CAAiBC,gBAnBH,SAACqB,GACnB,OAAQA,GACN,IAAK,OACHL,GAAQ,SAACM,GAAD,OAAOA,EAAI,KACnB,MACF,IAAK,UACHL,GAAW,SAACK,GAAD,OAAOA,EAAI,KACtB,MACF,IAAK,MACHJ,GAAO,SAACI,GAAD,OAAOA,EAAI,KAClB,MACF,QACE,aASF,cAACX,EAAD,CAASC,MAAM,aAAf,SACGO,EACC,cAAChB,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOY,EACPX,mBACEe,KAAKC,MAA0C,KAhClDL,EAAiBf,EAAOe,EAAiB,IAAM,IAgCU,MAI1D,cAACV,EAAD,CAAcC,QAAQ,4BC7ChCe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9ccddd43.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nexport default function FeedbackOptions({ onLeaveFeedback }) {\r\n  return (\r\n    <>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          onLeaveFeedback('good');\r\n        }}\r\n      >\r\n        Good\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          onLeaveFeedback('neutral');\r\n        }}\r\n      >\r\n        Neutral\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          onLeaveFeedback('bad');\r\n        }}\r\n      >\r\n        Bad\r\n      </button>\r\n    </>\r\n  );\r\n}\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) {\r\n  return (\r\n    <>\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad}</p>\r\n      <p>Total: {total}</p>\r\n      <p>Positive Feedback: {positivePercentage} %</p>\r\n    </>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n};\r\n","import PropTypes from 'prop-types';\r\nexport default function Notification({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <div>\r\n      {title && <h2>{title}</h2>}\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n","import { useState } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport Notification from './components/Notification';\nimport Section from './components/Section';\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const totalFeedback = good + neutral + bad;\n\n  const countPositiveFeedbackPercentage = () => {\n    return totalFeedback ? (good / totalFeedback) * 100 : 0;\n  };\n\n  const addFeedback = (options) => {\n    switch (options) {\n      case 'good':\n        setGood((s) => s + 1);\n        break;\n      case 'neutral':\n        setNeutral((s) => s + 1);\n        break;\n      case 'bad':\n        setBad((s) => s + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions onLeaveFeedback={addFeedback} />\n      </Section>\n      <Section title=\"Statistics\">\n        {totalFeedback ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={totalFeedback}\n            positivePercentage={\n              Math.round(countPositiveFeedbackPercentage() * 100) / 100\n            }\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}